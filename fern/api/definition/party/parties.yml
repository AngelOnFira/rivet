# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: ../common.yml
  partyCommons: ../party/common.yml
  localCommons: common.yml

service:
  auth: true
  url: Party
  audiences:
    - public
  base-path: ""
  endpoints:
    getFromInvite:
      path: /invites
      method: GET
      docs: Fetches a party based on a given invite.
      request:
        name: GetInviteRequest
        query-parameters:
          token:
            docs: See `rivet.api.party#CreatedInvite$token`.
            type: optional<string>
          alias:
            docs: >-
              An alias used to join a given party.
              This alias must be unique for all invites for your game.
              Pass this alias to `rivet.api.party.common#CreatedInvite$alias` to
              consume
              the invite.
            type: optional<string>
      response: GetInviteResponse

    create:
      path: /parties
      method: POST
      docs: Creates a new party.
      request:
        body: CreateRequest
      response: CreateResponse

    join:
      path: /parties/join
      method: POST
      docs: Joins a party using a given party invite.
      request:
        body: JoinRequest
      response: JoinResponse

    createInvite:
      path: /parties/self/invites
      method: POST
      docs: |-
        Creates a new party invite for the current identity's party.
        Identity must be the party leader.
      request:
        body: CreateInviteRequest
      response: CreateInviteResponse

    revokeInvite:
      path: /parties/self/invites/{invite_id}
      method: DELETE
      docs: |-
        Revokes a party invite from the current identity's party.
        Identity must be the party leader.
      path-parameters:
        invite_id:
          type: uuid

    leave:
      path: /parties/self/leave
      method: POST
      docs: Leaves the current identity's party.

    kickMember:
      path: /parties/self/members/{identity_id}/kick
      method: POST
      docs: |-
        Kicks a member from the current identity's current party.
        Identity must be the party leader.
      path-parameters:
        identity_id:
          type: uuid

    transferOwnership:
      path: /parties/self/members/{identity_id}/transfer-ownership
      method: POST
      docs: |-
        Transfers ownership of the party to another party member.
        Identity must be the party leader.
      path-parameters:
        identity_id:
          type: uuid

    getSelfProfile:
      path: /parties/self/profile
      method: GET
      docs: >-
        Returns a party profile for the party the current identity is a member
        of.
      request:
        name: GetSelfProfileRequest
        query-parameters:
          watch_index:
            docs: A query parameter denoting the requests watch index.
            type: optional<string>
      response: GetSelfProfileResponse

    setPublicity:
      path: /parties/self/publicity
      method: PUT
      docs: |-
        Sets the publicity of a party.
        This configures who can view and join the party.
        Identity must be the party leader.
      request:
        body: SetPublicityRequest

    getSelfSummary:
      path: /parties/self/summary
      method: GET
      docs: >-
        Returns a party summary for the party the current identity is a member
        of.
      request:
        name: GetSelfSummaryRequest
        query-parameters:
          watch_index:
            docs: A query parameter denoting the requests watch index.
            type: optional<string>
      response: GetSelfSummaryResponse

    sendJoinRequest:
      path: /parties/{party_id}/join-request/send
      method: POST
      path-parameters:
        party_id:
          type: uuid

    getProfile:
      path: /parties/{party_id}/profile
      method: GET
      docs: Returns a party profile.
      path-parameters:
        party_id:
          type: uuid
      request:
        name: GetProfileRequest
        query-parameters:
          watch_index:
            docs: A query parameter denoting the requests watch index.
            type: optional<string>
      response: GetProfileResponse

    getSummary:
      path: /parties/{party_id}/summary
      method: GET
      docs: Returns a party summary.
      path-parameters:
        party_id:
          type: uuid
      request:
        name: GetSummaryRequest
        query-parameters:
          watch_index:
            docs: A query parameter denoting the requests watch index.
            type: optional<string>
      response: GetSummaryResponse

types:
  GetInviteResponse:
    properties:
      party: partyCommons.Summary

  CreateRequest:
    properties:
      party_size:
        docs: >-
          How many members can join the party.
          If using this party with the matchmaker, this number should be less
          than
          or equal to your party player limit. Super large parties may not be
          able
          to fit insite a lobby and be unable to join the game.
        type: optional<double>
      publicity: optional<localCommons.CreatePublicityConfig>
      invites: optional<list<localCommons.CreateInviteConfig>>
      matchmaker_current_player_token:
        docs: |-
          If the player is currently in the lobby, pass the token from
          `rivet.matchmaker#MatchmakerLobbyJoinInfoPlayer$token`.
          This will prevent issuing a new player token and automatically set the
          party state to the player's current lobby.
        type: optional<string>

  CreateResponse:
    properties:
      party_id:
        type: uuid
      invites: list<localCommons.CreatedInvite>

  JoinRequest:
    properties:
      invite: localCommons.JoinInvite
      matchmaker_auto_join_lobby:
        docs: >-
          Whether or not to automatically join the game lobby if a party is
          currently in game.
        type: optional<boolean>
      matchmaker_current_player_token:
        docs: |-
          If the player is currently in the lobby, pass the token from
          `rivet.matchmaker#MatchmakerLobbyJoinInfoPlayer$token`.
          This will prevent issuing a new player token.
        type: optional<string>

  JoinResponse:
    properties:
      party_id:
        type: uuid

  CreateInviteRequest:
    properties:
      alias:
        docs: An alias used to join a given party.
        type: optional<string>

  CreateInviteResponse:
    properties:
      invite: localCommons.CreatedInvite

  GetSelfProfileResponse:
    properties:
      party: optional<partyCommons.Profile>
      watch: commons.WatchResponse

  SetPublicityRequest:
    properties:
      public: optional<partyCommons.PublicityLevel>
      mutual_followers: optional<partyCommons.PublicityLevel>
      groups: optional<partyCommons.PublicityLevel>

  GetSelfSummaryResponse:
    properties:
      party: optional<partyCommons.Summary>
      watch: commons.WatchResponse

  GetProfileResponse:
    properties:
      party: partyCommons.Profile
      watch: commons.WatchResponse

  GetSummaryResponse:
    properties:
      party: partyCommons.Summary
      watch: commons.WatchResponse
