syntax = "proto3";

package rivet.backend.db;

import "proto/common.proto";

// MARK: Game Namespace Config
message GameNamespaceConfig {
}

// MARK: Game Version Config
message GameVersionConfig {
	string database_name_id = 1;
	Schema schema = 2;
}

// MARK: Game Version Config Context
message GameVersionConfigCtx {
	rivet.common.Uuid database_id = 1;
}

// MARK: Game Version Config Meta
message GameVersionConfigMeta {
	rivet.common.Uuid database_id = 1;
}

// Database
message Database {
	rivet.common.Uuid database_id = 1;
	rivet.common.Uuid owner_team_id = 2;
	string name_id = 3;
	int64 create_ts = 4;
	Schema schema = 5;
}

message Schema {
	repeated Collection collections = 1;
}

message Collection {
	string name_id = 1;
	string entry_schema = 2;
	repeated Index indexes = 3;
	// repeated Aggregate aggregates = 4;
}

message Index {
	string name_id = 1;
	repeated GroupBySchema group_by = 2;
	repeated OrderBySchema order_by = 3;  // TODO: Order by value type
	// repeated Filter filters = 4;
	bool include_entry = 5;
}

/* message Aggregate {
	message GroupBy {
		string property = 1;
	}

	string name_id = 1;
	repeated GroupBySchema group_by = 2;
	repeated Filter filters = 3;

	oneof kind {
		google.protobuf.Empty count = 101;
		string sum = 102;
		string average = 103;
	}
} */

// Misc
message GroupBySchema {
	FieldPath field_path = 1;
}

message OrderBySchema {
	enum Direction {
		Asc = 0;
		Desc = 1;
	}

	enum FieldType {
		Int = 0;
		Float = 1;
		String = 2;
	}

	FieldPath field_path = 1;
	FieldType field_type = 2;
	Direction direction = 3;
}

message GroupBy {
	FieldPath field_path = 1;

	// JSON
	string value = 2;
}

// Query
message Query {
	message Get {
		string collection = 1;
		repeated rivet.common.Uuid entry_ids = 2;
	}

	message Insert {
		message Entry {
			// JSON
			string value = 1;
		}

		string collection = 1;
		repeated string entries = 2;
	}

	message Update {
		message Set {
			FieldPath field_path = 1;

			// JSON
			string value = 2;
		}

		string collection = 1;
		repeated rivet.common.Uuid entry_ids = 2;

		repeated Set set = 3;
	}

	message Delete {
		string collection = 1;
		repeated rivet.common.Uuid entry_ids = 2;
	}

	message Query {
		string collection = 1;
		string index = 2;
		repeated GroupBy group_by = 3;
		// repeated Filter filters = 4;
		// uint64 offset = 5;
		// uint64 limit = 6;
	}

	/* message Aggregate {
		string collection = 1;
		string aggregate = 2;

		// Field path -> JSON
		map<string, string> group_by = 3;
	} */

	oneof kind {
		Get get = 101;
		Insert insert = 102;
		Update update = 103;
		Delete delete = 104;
		Query query = 105;
		// Aggregate aggregate = 106;
	}
}

message Filter {
	string property = 1;

	oneof kind {
		FieldPath eq = 101;
		FieldPath gt = 102;
		FieldPath lt = 103;
		FieldPath gte = 104;
		FieldPath lte = 105;
		// TODO: In set
		// TODO: Not in set
	}
}

message FieldPath {
	repeated string field_path = 1;
}

