locals {
	redis_svcs = {
		for k, v in var.redis_dbs:
		k => {
			persistent = v.persistent
			username = module.secrets.values["redis/${k}/username"]
			password = module.secrets.values["redis/${k}/password"]
		}
	}
}

module "secrets" {
	source = "../modules/secrets"

	keys = flatten([
		for k, v in var.redis_dbs:
		[
			"redis/${k}/username",
			"redis/${k}/password",
		]
	])
}

# TODO:
resource "kubernetes_namespace" "redis" {
	for_each = var.redis_dbs

	metadata {
		name = "redis-${each.key}"
	}
}

resource "helm_release" "redis" {
	for_each = local.redis_svcs

	name = "redis"
	namespace = kubernetes_namespace.redis[each.key].metadata.0.name
	chart = "../../helm/redis-cluster"
	# repository = "https://charts.bitnami.com/bitnami"
	# chart = "redis-cluster"
	# version = "9.0.6"
	values = [yamlencode({
		password = each.value.password
		global = {
			storageClass = var.k8s_storage_class
		}
		# TODO: Allow this to be configured
		# Create minimal cluster
		cluster = {
			nodes = 3
			replicas = 0
		}
		auth = {
			enable = true
		}
		metrics = {
			enabled = true
		}
		tls = {
			enabled = true
			authClients = false
			autoGenerated = true
		}
		persistence = {
			enabled = each.value.persistent
		}
	})]
}

data "kubernetes_secret" "redis_ca" {
	for_each = var.redis_dbs

	depends_on = [helm_release.redis]

	metadata {
		name = "redis-redis-cluster-crt"
		namespace = kubernetes_namespace.redis[each.key].metadata.0.name
	}
}

resource "kubernetes_config_map" "redis_ca" {
	for_each = var.redis_dbs

	metadata {
		name = "redis-${each.key}-ca"
		namespace = "rivet-service"
	}

	data = {
		"ca.crt" = data.kubernetes_secret.redis_ca[each.key].data["ca.crt"]
	}
}
