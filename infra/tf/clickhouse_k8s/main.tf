module "secrets" {
	source = "../modules/secrets"

	keys = [
		"clickhouse/users/default/password"
	]
}

resource "kubernetes_namespace" "clickhouse" {
	metadata {
		name = "clickhouse"
	}
}

resource "helm_release" "clickhouse" {
	name = "clickhouse"
	namespace = kubernetes_namespace.clickhouse.metadata.0.name
	repository = "oci://registry-1.docker.io/bitnamicharts"
	chart = "clickhouse"
	version = "3.6.3"
	values = [yamlencode({
		global = {
			storageClass = var.k8s_storage_class
		}
		replicaCount = 1
		shards = 1
		zookeeper = {
			replicaCount = 1
		}
		tls = {
			enabled = true
			autoGenerated = true
		}

		# Disable insecure ports
		extraOverrides = <<-EOF
			<?xml version="1.0"?>
			<clickhouse>
				<http_port remove="remove"/>
				<tcp_port remove="remove"/>
				<interserver_http_port remove="remove"/>
				<interserver_https_port>9010</interserver_https_port>

				# See https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/replication#replicatedmergetree-parameters
				<default_replica_path>/clickhouse/tables/{shard}/{database}/{table}</default_replica_path>
				<default_replica_name>{replica}</default_replica_name>
			</clickhouse>
			EOF
		
		# Grant access to default user
		usersExtraOverrides = <<-EOF
			<?xml version="1.0"?>
			<clickhouse>
				<users>
					<default>
						<access_management>1</access_management>
					</default>
				</users>
			</clickhouse>
			EOF

		# Probes can't use https for some reason
		livenessProbe = {
			enabled = false
		}
		readinessProbe = {
			enabled = false
		}
		# TODO: Make probes use secure port
		# customLivenessProbe = {
		# 	httpGet = {
		# 		path = "/ping"
		# 		port = "https"
		# 	}
		# }
		# customReadinessProbe = {
		# 	httpGet = {
		# 		path = "/ping"
		# 		port = "https"
		# 	}
		# }

		# Admin auth
		auth = {
			username = "default"
			password = module.secrets.values["clickhouse/users/default/password"]
		}
	})]
}

data "kubernetes_secret" "clickhouse_ca" {
	depends_on = [helm_release.clickhouse]

	metadata {
		name = "clickhouse-crt"
		namespace = kubernetes_namespace.clickhouse.metadata.0.name
	}
}

resource "kubernetes_config_map" "clickhouse_ca" {
	for_each = toset(["rivet-service", "bolt"])

	metadata {
		name = "clickhouse-ca"
		namespace = each.value
	}

	data = {
		"ca.crt" = data.kubernetes_secret.clickhouse_ca.data["ca.crt"]
	}
}
