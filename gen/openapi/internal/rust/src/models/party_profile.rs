/*
 * Rivet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PartyProfile {
    #[serde(rename = "activity")]
    pub activity: Box<crate::models::PartyActivity>,
    /// RFC3339 timestamp.
    #[serde(rename = "create_ts")]
    pub create_ts: String,
    #[serde(rename = "external")]
    pub external: Box<crate::models::PartyExternalLinks>,
    /// A list of party invites.
    #[serde(rename = "invites")]
    pub invites: Vec<crate::models::PartyInvite>,
    /// A list of party members.
    #[serde(rename = "members")]
    pub members: Vec<crate::models::PartyMemberSummary>,
    #[serde(rename = "party_id")]
    pub party_id: uuid::Uuid,
    /// Unsigned 32 bit integer.
    #[serde(rename = "party_size", skip_serializing_if = "Option::is_none")]
    pub party_size: Option<i32>,
    #[serde(rename = "publicity")]
    pub publicity: Box<crate::models::PartyPublicity>,
    #[serde(rename = "thread_id")]
    pub thread_id: uuid::Uuid,
}

impl PartyProfile {
    pub fn new(activity: crate::models::PartyActivity, create_ts: String, external: crate::models::PartyExternalLinks, invites: Vec<crate::models::PartyInvite>, members: Vec<crate::models::PartyMemberSummary>, party_id: uuid::Uuid, publicity: crate::models::PartyPublicity, thread_id: uuid::Uuid) -> PartyProfile {
        PartyProfile {
            activity: Box::new(activity),
            create_ts,
            external: Box::new(external),
            invites,
            members,
            party_id,
            party_size: None,
            publicity: Box::new(publicity),
            thread_id,
        }
    }
}


