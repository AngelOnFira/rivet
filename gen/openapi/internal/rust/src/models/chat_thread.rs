/*
 * Rivet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ChatThread : A chat thread



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ChatThread {
    #[serde(rename = "create_ts")]
    pub create_ts: String,
    #[serde(rename = "external")]
    pub external: Box<crate::models::ChatThreadExternalLinks>,
    #[serde(rename = "last_read_ts")]
    pub last_read_ts: String,
    #[serde(rename = "tail_message", skip_serializing_if = "Option::is_none")]
    pub tail_message: Option<Box<crate::models::ChatMessage>>,
    #[serde(rename = "thread_id")]
    pub thread_id: uuid::Uuid,
    #[serde(rename = "topic")]
    pub topic: Box<crate::models::ChatTopic>,
    #[serde(rename = "unread_count")]
    pub unread_count: i64,
}

impl ChatThread {
    /// A chat thread
    pub fn new(create_ts: String, external: crate::models::ChatThreadExternalLinks, last_read_ts: String, thread_id: uuid::Uuid, topic: crate::models::ChatTopic, unread_count: i64) -> ChatThread {
        ChatThread {
            create_ts,
            external: Box::new(external),
            last_read_ts,
            tail_message: None,
            thread_id,
            topic: Box::new(topic),
            unread_count,
        }
    }
}


