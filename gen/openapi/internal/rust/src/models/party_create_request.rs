/*
 * Rivet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PartyCreateRequest {
    #[serde(rename = "invites", skip_serializing_if = "Option::is_none")]
    pub invites: Option<Vec<crate::models::PartyCreateInviteConfig>>,
    /// If the player is currently in the lobby, pass the token from `rivet.matchmaker#MatchmakerLobbyJoinInfoPlayer$token`. This will prevent issuing a new player token and automatically set the party state to the player's current lobby.
    #[serde(rename = "matchmaker_current_player_token", skip_serializing_if = "Option::is_none")]
    pub matchmaker_current_player_token: Option<String>,
    /// How many members can join the party. If using this party with the matchmaker, this number should be less than or equal to your party player limit. Super large parties may not be able to fit insite a lobby and be unable to join the game.
    #[serde(rename = "party_size", skip_serializing_if = "Option::is_none")]
    pub party_size: Option<f64>,
    #[serde(rename = "publicity", skip_serializing_if = "Option::is_none")]
    pub publicity: Option<Box<crate::models::PartyCreatePublicityConfig>>,
}

impl PartyCreateRequest {
    pub fn new() -> PartyCreateRequest {
        PartyCreateRequest {
            invites: None,
            matchmaker_current_player_token: None,
            party_size: None,
            publicity: None,
        }
    }
}


