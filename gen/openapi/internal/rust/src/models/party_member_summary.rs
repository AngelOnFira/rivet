/*
 * Rivet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PartyMemberSummary {
    #[serde(rename = "identity")]
    pub identity: Box<crate::models::IdentityHandle>,
    /// Whether or not this party member is the leader of the given party.
    #[serde(rename = "is_leader")]
    pub is_leader: bool,
    #[serde(rename = "join_ts")]
    pub join_ts: String,
    #[serde(rename = "state")]
    pub state: Box<crate::models::PartyMemberState>,
}

impl PartyMemberSummary {
    pub fn new(identity: crate::models::IdentityHandle, is_leader: bool, join_ts: String, state: crate::models::PartyMemberState) -> PartyMemberSummary {
        PartyMemberSummary {
            identity: Box::new(identity),
            is_leader,
            join_ts,
            state: Box::new(state),
        }
    }
}


